# -*- coding: utf-8 -*-
"""Drive - Projeo RPG dia a dia para crian√ßas e jovens neurot√≠picos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gl0FwXBIxoVdLR--BK127xBUv1YWGl7h
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

import os
from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

!pip install -q google-adk

!pip install -q Pillow

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.colab import drive
drive.mount('/content/drive')
from google.genai import types
from datetime import date
import textwrap
from google.colab import drive
from PIL import Image
import os
from IPython.display import display, Markdown
import requests
import warnings

warnings.filterwarnings("ignore")
import textwrap
from IPython.display import display, Markdown
import requests
import warnings

warnings.filterwarnings("ignore")

def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# ---      Agente 0: Introdu√ß√£o      --- #
##########################################
import os
from IPython.display import display, Image, Markdown
from google.colab import drive

# Se o Drive ainda n√£o estiver montado, descomente a linha abaixo e execute a c√©lula
drive.mount('/content/drive')

def agente_apresentacao():
    """
    Agente 0: Pergunta o g√™nero, exibe a capa da apresenta√ß√£o do RPG correspondente
    e pergunta se o usu√°rio est√° pronto. Retorna True se estiver pronto, False caso contr√°rio.
    """
    print("\nAGENTE 0: Iniciando a apresenta√ß√£o da nossa incr√≠vel aventura!")

    pasta_apresentacao = '/content/drive/MyDrive/Apresentacao_RPG' # Ajuste o caminho se necess√°rio
    nome_arquivo_capa = 'Capa_RPG'
    extensao_arquivo = '.png'
    genero = ''

    while True:
        escolha_genero = input("\nVoc√™ √© um aventureiro (M) ou aventureira (F)? (Digite M ou F)\n").strip().upper()
        if escolha_genero == 'M':
            genero = '_M'
            break
        elif escolha_genero == 'F':
            genero = '_F'
            break
        else:
            print("Op√ß√£o inv√°lida. Por favor, digite 'M' para masculino ou 'F' para feminino.")

    caminho_arquivo_capa = os.path.join(pasta_apresentacao, f"{nome_arquivo_capa}{genero}{extensao_arquivo}")

    try:
        display(Image(filename=caminho_arquivo_capa))
    except FileNotFoundError:
        print(f"Erro: Arquivo da capa n√£o encontrado em {caminho_arquivo_capa}")
    except Exception as e:
        print(f"Ocorreu um erro ao exibir a imagem da capa: {e}")


# Para usar o Agente 0:
if agente_apresentacao():
    # Aqui voc√™ chamaria o Agente 1
    print("\n--- Iniciando o Agente 1 ---")
    # Coloque a chamada para a fun√ß√£o do Agente 1 aqui (ex: ficha_do_heroi = agente_setup())
else:
    print("\nA apresenta√ß√£o foi interrompida.")

##########################################
# --- Agente 1: Agente de Setup --- #
##########################################
import os
from IPython.display import Image as DisplayImage
import matplotlib.pyplot as plt
from PIL import Image
from google.colab import drive

# Se o Drive ainda n√£o estiver montado, descomente a linha abaixo e execute a c√©lula
drive.mount('/content/drive')

def agente_setup():
    """
    Agente 1: Coleta informa√ß√µes do jogador, apresenta os personagens com op√ß√µes num√©ricas,
    permite a escolha por n√∫mero e exibe a ficha do personagem.
    """
    nome_jogador = input("Ol√° aventureiro(a)! Qual o seu nome? ")

    personagens_disponiveis = {
        1: {
            "Nome": "Bruxa das Chamas S√°bias",
            "Classe": "Bruxa",
            "T√≠tulo": "Guardi√£ da Chama do Conhecimento",
            "Atributos": {"Intelig√™ncia": 9, "Sabedoria": 8, "Destreza": 4, "Reflexo": 3},
            "Habilidades Especiais": [
                "Leitura Arcana: Pode recome√ßar o tempo de uma miss√£o (1x por dia com teste de sabedoria dificuldade alta).",
                "Mente Anal√≠tica: +2 nos testes de leitura, interpreta√ß√£o de texto, racioc√≠nio l√≥gico ou matem√°tica. (ganha mais 15 minutos, dificuldade m√©dia)"
            ],
            "Descri√ß√£o": "A Bruxa das Chamas S√°bias domina os mist√©rios do saber. Sempre com um livro em m√£os e olhos atentos, ela resolve problemas como quem lan√ßa feiti√ßos: com paci√™ncia, estrat√©gia e foco. N√£o gosta de pressa nem bagun√ßa. Mas com tempo e concentra√ß√£o, √© capaz de vencer qualquer desafio mental.",
            "nome_arquivo_ficha": "bruxa_chamas_sabias.png"
        },
        2: {
            "Nome": "Feiticeira dos Raios R√°pidos",
            "Classe": "Feiticeira",
            "T√≠tulo": "Guardi√£ da Tempestade Interior",
            "Atributos": {"Intelig√™ncia": 5, "Sabedoria": 4, "Destreza": 7, "Reflexo": 10},
            "Habilidades Especiais": [
                "A√ß√£o Rel√¢mpago: Uma vez por dia, pode trocar uma tarefa chata por uma vers√£o mais curta (com metade do XP, dificuldade alta).",
                "B√¥nus de Velocidade: +3 nos testes com tempo limitado (como concluir tarefas antes do tempo acabar, dificuldade m√©dia).",
                "Foco Instant√¢neo: Quando est√° totalmente focada, pode jogar 2 dados e escolher o melhor resultado (1x por dia)."
            ],
            "Descri√ß√£o": "A Feiticeira dos Raios R√°pidos √© pura energia em forma de magia. Seus pensamentos s√£o velozes como o trov√£o, e seus movimentos quase n√£o podem ser vistos. Perfeita para miss√µes em que o tempo √© curto e a concentra√ß√£o precisa ser certeira. Mas cuidado ‚Äî o mesmo raio que ilumina, tamb√©m pode dispersar!",
            "nome_arquivo_ficha": "feiticeira_raios_rapidos.png"
        },
        3: {
            "Nome": "Druida do Vento Brincalh√£o",
            "Classe": "Druida",
            "T√≠tulo": "Guardi√£ da Alegria e Movimento",
            "Atributos": {"Intelig√™ncia": 6, "Sabedoria": 6, "Destreza": 9, "Reflexo": 8},
            "Habilidades Especiais": [
                "Esp√≠rito Livre: Pode trocar a ordem de duas tarefas do dia sem perder XP.",
                "B√¥nus Natural: +2 em tarefas que envolvam desenho, organiza√ß√£o do ambiente ou criatividade.",
                "Foco Ventoso: Quando est√° ouvindo m√∫sica ou se movendo, ganha +2 em testes de tempo e agilidade."
            ],
            "Descri√ß√£o": "A Druida do Vento Brincalh√£o √© leve como uma pluma e curiosa como um esquilo. Adora cores, movimento e coisas novas. N√£o suporta mesmice nem obriga√ß√µes sem sentido. Mas com liberdade e divers√£o, transforma qualquer tarefa em m√°gica ‚Äî mesmo as mais dif√≠ceis!",
            "nome_arquivo_ficha": "druida_vento_brincalhao.png"
        }
    }

    print("\nConhe√ßa os her√≥is que podem te ajudar nessa aventura:")
    for numero, info in personagens_disponiveis.items():
        print(f"{numero} - {info['Nome']} ({info['Classe']}, {info['T√≠tulo']}):")
        print(f"  ‚ú® Atributos: {info['Atributos']}")
        print(f"  üìú Habilidades Especiais: {', '.join(info['Habilidades Especiais'])}")
        print(f"  üìö Descri√ß√£o: {info['Descri√ß√£o'][:100]}...") # Mostra s√≥ um trecho da descri√ß√£o
        print("-" * 30)

    while True:
        escolha = input("Escolha seu her√≥i digitando o n√∫mero correspondente (1, 2 ou 3):\n").strip()
        if escolha in ["1", "2", "3"]:
            numero_escolhido = int(escolha)
            personagem_escolhido = personagens_disponiveis[numero_escolhido]
            ficha_personagem = {
                "Nome do Jogador": nome_jogador,
                "Nome do Personagem": personagem_escolhido["Nome"],
                "Classe": personagem_escolhido["Classe"],
                "T√≠tulo": personagem_escolhido["T√≠tulo"],
                "Atributos": personagem_escolhido["Atributos"],
                "Habilidades Especiais": personagem_escolhido["Habilidades Especiais"],
                "Descri√ß√£o": personagem_escolhido["Descri√ß√£o"],
                "nome_arquivo_ficha": personagem_escolhido["nome_arquivo_ficha"]
            }
            print("\nFicha do seu personagem:")
            for chave, valor in ficha_personagem.items():
                if chave == "Atributos":
                    print(f"  - {chave}:")
                    for atributo, valor_atributo in valor.items():
                        print(f"    - {atributo}: {valor_atributo}")
                elif chave == "Habilidades Especiais":
                    print(f"  - {chave}:")
                    for habilidade in valor:
                        print(f"    - {habilidade}")
                else:
                    print(f"  - {chave}: {valor}")

            pasta_fichas = '/content/drive/MyDrive/FichaPersonagens'
            caminho_ficha_imagem = os.path.join(pasta_fichas, ficha_personagem["nome_arquivo_ficha"])

            try:
                img = Image.open(caminho_ficha_imagem)
                print(f"\n Legal {nome_jogador}, boa escolha, aqui est√° a sua ficha...")
                plt.imshow(img)
                plt.axis('off')
                plt.show()
            except FileNotFoundError:
                print(f"Erro: Arquivo da ficha n√£o encontrado em {caminho_ficha_imagem}")
            except Exception as e:
                print(f"Ocorreu um erro ao abrir a imagem da ficha: {e}")

            return ficha_personagem
        else:
            print("Op√ß√£o inv√°lida. Por favor, digite 1, 2 ou 3 para escolher seu her√≥i.")

# Para testar o Agente 1:
ficha = agente_setup()
# print("Ficha final criada (para o pr√≥ximo agente):", ficha)

################################################
# ---          Agente 2: Miss√µes           --- #
################################################
from PIL import Image, ImageDraw, ImageFont
import os
import matplotlib.pyplot as plt

def agente_missoes(ficha_personagem):
    """
    Agente 2: Pergunta aos respons√°veis sobre as dificuldades da crian√ßa
    e ajusta os valores de dificuldade das miss√µes.
    """
    print("\nPreparem-se, aventureiros e respons√°veis! O Mago Supremo da Aventura precisa da ajuda de voc√™s para preparar os desafios √† altura do nosso her√≥i!")

    # Pergunta sobre a √°rea de maior dificuldade (Casa ou Escola)
    while True:
        area_dificuldade = input("\nEm qual √°rea a crian√ßa precisa de mais aten√ß√£o?\n1 - Casa\n2 - Escola\nDigite o n√∫mero da sua escolha:\n").strip()
        if area_dificuldade in ["1", "2"]:
            area_dificuldade = int(area_dificuldade)
            break
        else:
            print("Op√ß√£o inv√°lida. Por favor, digite 1 para Casa ou 2 para Escola.")

    # Dificuldades das tarefas de casa
    dificuldades_casa = {}
    print("\nAgora, vamos definir a dificuldade das Tarefas de Casa (mais dif√≠cil primeiro):")
    tarefas_casa = ["Higiene", "Lavar a Lou√ßa", "Arrumar Quarto"]
    niveis_dificuldade = {"1": "Dif√≠cil", "2": "M√©dia", "3": "F√°cil"}
    valores_dificuldade = {"Dif√≠cil": 24, "M√©dia": 20, "F√°cil": 18}

    for i in range(3):
        while True:
            escolha = input(f"Qual a dificuldade da tarefa '{tarefas_casa[i]}' (1-Dif√≠cil, 2-M√©dia, 3-F√°cil)?\n").strip()
            if escolha in ["1", "2", "3"] and niveis_dificuldade[escolha] not in dificuldades_casa.values():
                dificuldade_escolhida = niveis_dificuldade[escolha]
                valor_dificuldade = valores_dificuldade[dificuldade_escolhida]
                if area_dificuldade == 1: # Se Casa foi escolhido como mais dif√≠cil
                    valor_dificuldade += 2
                dificuldades_casa[tarefas_casa[i]] = valor_dificuldade
                break
            elif escolha not in ["1", "2", "3"]:
                print("Op√ß√£o inv√°lida. Por favor, digite 1, 2 ou 3.")
            else:
                print("Essa dificuldade j√° foi escolhida. Por favor, escolha outra.")

    # Dificuldades das mat√©rias escolares
    dificuldades_escola = {}
    print("\nAgora, vamos definir a dificuldade das Mat√©rias Escolares (mais dif√≠cil primeiro):")
    materias_escola = ["Matem√°tica / Ci√™ncias", "Portugu√™s / Literatura", "Hist√≥ria / Geografia"]

    for i in range(3):
        while True:
            escolha = input(f"Qual a dificuldade de '{materias_escola[i]}' (1-Dif√≠cil, 2-M√©dia, 3-F√°cil)?\n").strip()
            if escolha in ["1", "2", "3"] and niveis_dificuldade[escolha] not in dificuldades_escola.values():
                dificuldade_escolhida = niveis_dificuldade[escolha]
                valor_dificuldade = valores_dificuldade[dificuldade_escolhida]
                if area_dificuldade == 2: # Se Escola foi escolhido como mais dif√≠cil
                    valor_dificuldade += 2
                dificuldades_escola[materias_escola[i]] = valor_dificuldade
                break
            elif escolha not in ["1", "2", "3"]:
                print("Op√ß√£o inv√°lida. Por favor, digite 1, 2 ou 3.")
            else:
                print("Essa dificuldade j√° foi escolhida. Por favor, escolha outra.")

    missoes = {
        "escola": [
            {
                "Nome": "Po√ß√£o dos N√∫meros Explosivos",
                "Descri√ß√£o": "Resolver exerc√≠cios de Matem√°tica / Ci√™ncias",
                "Atributo": "Sabedoria",
                "Dificuldade": dificuldades_escola["Matem√°tica / Ci√™ncias"],
                "Tempo da miss√£o": 40,
                "Teste": "D20 + Sabedoria",
                "Sucesso": "Ganha +15 minutos extras e XP dobrado",
                "Falha": "Ganha s√≥ metade do XP e atrai o monstro da Bagun√ßa dos N√∫meros Dan√ßantes"
            },
            {
                "Nome": "Cr√¥nicas da Lingua Hist√≥rica Perdida",
                "Descri√ß√£o": "Resolver os exerc√≠cios de Portugu√™s/Leitura de Livros",
                "Atributo": "Intelig√™ncia",
                "Dificuldade": dificuldades_escola["Portugu√™s / Literatura"],
                "Tempo da miss√£o": 30,
                "Teste": "D20 + Intelig√™ncia",
                "Sucesso": "Pode pular uma quest√£o dif√≠cil ou trocar por outra.",
                "Falha": "Ganha s√≥ metade do XP e atrai o monstro"
            },
            {
                "Nome": "Runas da Localiza√ß√£o Hist√≥rica",
                "Descri√ß√£o": "Resolver os exerc√≠cios de Hist√≥ria / Geografia",
                "Atributo": "Intelig√™ncia",
                "Dificuldade": dificuldades_escola["Hist√≥ria / Geografia"],
                "Tempo da miss√£o": 30,
                "Teste": "D20 + Intelig√™ncia",
                "Sucesso": "Pode pesquisar no Gemini  para resolver 1 quest√£o",
                "Falha": "Ganha s√≥ metade do XP e atrai o monstro da Perda de Mem√≥ria e Tempo"
            }
        ],
        "casa": [
            {
                "Nome": "Lou√ßa dos Esp√≠ritos Invis√≠veis",
                "Descri√ß√£o": "Lavar prato, talheres e copo ap√≥s refei√ß√£o.",
                "Atributo": "Destreza",
                "Dificuldade": dificuldades_casa["Lavar a Lou√ßa"],
                "Tempo da miss√£o": "Livre",
                "Teste": "D20 + Destreza",
                "Sucesso": "Evita perder XP se saiu da mesa e esqueceu",
                "Falha": "Ganha s√≥ metade do XP e atrai o monstro da Sujeira Mal√©vola"
            },
            {
                "Nome": "Esp√≠rito Guardi√£o do Quarto",
                "Descri√ß√£o": "Guardar roupas, arrumar a cama, recolher cadernos e objetos espalhados, deixar o quarto limpo e em ordem.",
                "Atributo": "Reflexo",
                "Dificuldade": dificuldades_casa["Arrumar Quarto"],
                "Tempo da miss√£o": 30,
                "Teste": "D20 + Reflexo",
                "Sucesso": "Ganha 15 minutos extras de tela",
                "Falha": "Ganha s√≥ metade do XP e atrai o Monstro da Bagun√ßa Sombria."
            },
            {
                "Nome": "Ritual do Corpo Luminoso",
                "Descri√ß√£o": "Tomar banho, escovar dentes e cabelo.",
                "Atributo": "Sabedoria",
                "Dificuldade": dificuldades_casa["Higiene"],
                "Tempo da miss√£o": 30,
                "Teste": "D20 + Sabedoria",
                "Sucesso": "Ganha 10 minutos extra",
                "Falha": "Ganha s√≥ metade do XP e atrai o monstro do Fedor Supremo"
            }
        ]
    }

    print("\nTudo pronto aventureiro, as miss√µes foram ajustadas pelo Mago Supremo!")
    return ficha_personagem, missoes

# Supondo que 'ficha_do_heroi' j√° est√° definida
if 'ficha_do_heroi' in locals():
    ficha_com_missoes = agente_missoes(ficha_do_heroi)
    #print("\nFicha do Her√≥i com as Miss√µes Ajustadas:", ficha_com_missoes)
else:
    print("Por favor, execute o Agente 1 primeiro para obter a ficha do personagem.")

################################################
# ---      Agente 3: Print Miss√µes         --- #
################################################
import os
import matplotlib.pyplot as plt
from PIL import Image
from google.colab import drive

drive.mount('/content/drive')

def agente_mostrar_missoes(ficha_do_heroi, missoes):
    """
    Agente 3: Recebe a ficha do her√≥i e as miss√µes e exibe as fichas de imagem
    das miss√µes, indicando o nome e a dificuldade.
    """
    print("\nAGENTE 3: Apresentando as fichas das suas miss√µes personalizadas, aventureiro(a)!")

    pasta_fichas_missoes = '/content/drive/MyDrive/FichasMissoes'

    print("\nSuas Miss√µes Personalizadas:")

    for tipo_missao, lista_missoes in missoes.items():
        for missao in lista_missoes:
            nome_arquivo_missao = f"{missao['Nome'].lower().replace(' ', '_')}.png"
            caminho_ficha_missao = os.path.join(pasta_fichas_missoes, nome_arquivo_missao)

            try:
                img = Image.open(caminho_ficha_missao)
                plt.figure(figsize=(8, 6))
                plt.imshow(img)
                plt.axis('off')
                plt.title(f"{missao['Nome']} (Dificuldade: {missao['Dificuldade']})")
                plt.show()
            except FileNotFoundError:
                print(f"Erro: Arquivo da ficha da miss√£o n√£o encontrado em {caminho_ficha_missao}")
            except Exception as e:
                print(f"Ocorreu um erro ao abrir a imagem da ficha da miss√£o: {e}")

    print("\nA visualiza√ß√£o das suas miss√µes est√° completa!")

# Para usar o Agente 3 (depois de executar os Agentes 1 e 2):
# Supondo que 'ficha_do_heroi' e 'ficha_com_missoes' estejam definidos
# (onde 'ficha_com_missoes' √© o retorno do agente_missoes)
if 'ficha_do_heroi' in locals() and 'ficha_com_missoes' in locals():
    agente_mostrar_missoes(ficha_do_heroi, ficha_com_missoes[1])
else:
    print("Por favor, execute os Agentes 1 e 2 primeiro.")

################################################
# ---      Agente 4: Agenda Google         --- #
################################################
import os
from IPython.display import display, HTML
from google.colab import drive
import urllib.parse
import matplotlib.pyplot as plt
from PIL import Image

drive.mount('/content/drive')

def agente_agenda_xp():
    """
    Agente 4: Gera um link para adicionar um lembrete no Google Calendar
    e exibe uma imagem PNG com as instru√ß√µes de como contar XP e Fragmentos de Mem√≥ria.
    """
    print("\nO Mago Supremo est√° preparando um aux√≠lio para a contagem dos seus feitos di√°rios!")

    # --- Gera√ß√£o do link para o Google Calendar (usando HTML) ---
    titulo_evento = urllib.parse.quote_plus("Lembrete: Contabilizar XP e Fragmentos de Mem√≥ria")
    detalhes_evento = urllib.parse.quote_plus("Lembre-se de contabilizar o XP das miss√µes do dia e rolar 1D8 por tarefa para ver quantos Fragmentos de Mem√≥ria voc√™ conquistou.")
    hora_evento = "21" # Hora em formato 24 horas
    minuto_evento = "00"
    data_inicial = "20250517" # Uma data inicial qualquer para o link funcionar
    data_final = "20260517" # Uma data final qualquer para o link de recorr√™ncia

    link_recorrencia = f"https://calendar.google.com/calendar/r/eventedit?dates={data_inicial}T{hora_evento}{minuto_evento}00/{data_final}T{hora_evento}{minuto_evento}00&text={titulo_evento}&details={detalhes_evento}&sf=true&recur=RRULE:FREQ=DAILY"

    html_link = f"""

    Aqui est√° o lembrete m√°gico para n√£o esquecer de contabilizar seus feitos aventureiro(a), n√£o perca esse lembrete:\n

    <a href="{link_recorrencia}" target="_blank">Adicionar ao Google Calendar</a>
    """
    display(HTML(html_link))

    # --- Exibi√ß√£o das instru√ß√µes de contagem da imagem PNG ---
    pasta_contagem_xp = '/content/drive/MyDrive/ContagemXP' # Ajuste o caminho se necess√°rio
    nome_arquivo_contagem = 'contagem_fragmentos_de_memoria_e_XP.png'
    caminho_arquivo_contagem = os.path.join(pasta_contagem_xp, nome_arquivo_contagem)

    try:
        img = Image.open(caminho_arquivo_contagem)
        plt.figure(figsize=(8, 6))
        plt.imshow(img)
        plt.axis('off')
        plt.title("Como Contar seus Fragmentos de Mem√≥ria e XP")
        plt.show()
    except FileNotFoundError:
        print(f"Erro: Arquivo de instru√ß√µes (imagem) n√£o encontrado em {caminho_arquivo_contagem}")
    except Exception as e:
        print(f"Ocorreu um erro ao abrir o arquivo de instru√ß√µes (imagem): {e}")

    print("\nProjeto finalizado! O Mago Supremo se despede e deseja uma jornada √©pica!")

# Para usar o Agente 4:
agente_agenda_xp()